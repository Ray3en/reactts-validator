import { CompilerPackageNames } from "./compilerVersions.generated";
import { CompilerApi, Node } from "./CompilerApi";
export declare function importCompilerApi(packageName: CompilerPackageNames): Promise<{
    default: typeof import("typescript");
    tokenToString(t: import("typescript").SyntaxKind): string | undefined;
    getPositionOfLineAndCharacter(sourceFile: import("typescript").SourceFileLike, line: number, character: number): number;
    getLineAndCharacterOfPosition(sourceFile: import("typescript").SourceFileLike, position: number): import("typescript").LineAndCharacter;
    isWhiteSpaceLike(ch: number): boolean;
    isWhiteSpaceSingleLine(ch: number): boolean;
    isLineBreak(ch: number): boolean;
    couldStartTrivia(text: string, pos: number): boolean;
    forEachLeadingCommentRange<U>(text: string, pos: number, cb: (pos: number, end: number, kind: import("typescript").CommentKind, hasTrailingNewLine: boolean) => U): U | undefined;
    forEachLeadingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: import("typescript").CommentKind, hasTrailingNewLine: boolean, state: T) => U, state: T): U | undefined;
    forEachTrailingCommentRange<U>(text: string, pos: number, cb: (pos: number, end: number, kind: import("typescript").CommentKind, hasTrailingNewLine: boolean) => U): U | undefined;
    forEachTrailingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: import("typescript").CommentKind, hasTrailingNewLine: boolean, state: T) => U, state: T): U | undefined;
    reduceEachLeadingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: import("typescript").CommentKind, hasTrailingNewLine: boolean, state: T) => U, state: T, initial: U): U | undefined;
    reduceEachTrailingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: import("typescript").CommentKind, hasTrailingNewLine: boolean, state: T) => U, state: T, initial: U): U | undefined;
    getLeadingCommentRanges(text: string, pos: number): import("typescript").CommentRange[] | undefined;
    getTrailingCommentRanges(text: string, pos: number): import("typescript").CommentRange[] | undefined;
    getShebang(text: string): string | undefined;
    isIdentifierStart(ch: number, languageVersion: import("typescript").ScriptTarget | undefined): boolean;
    isIdentifierPart(ch: number, languageVersion: import("typescript").ScriptTarget | undefined, identifierVariant?: import("typescript").LanguageVariant): boolean;
    createScanner(languageVersion: import("typescript").ScriptTarget, skipTrivia: boolean, languageVariant?: import("typescript").LanguageVariant, textInitial?: string, onError?: import("typescript").ErrorCallback, start?: number, length?: number): import("typescript").Scanner;
    isExternalModuleNameRelative(moduleName: string): boolean;
    sortAndDeduplicateDiagnostics<T extends import("typescript").Diagnostic>(diagnostics: readonly T[]): import("typescript").SortedReadonlyArray<T>;
    getDefaultLibFileName(options: import("typescript").CompilerOptions): string;
    textSpanEnd(span: import("typescript").TextSpan): number;
    textSpanIsEmpty(span: import("typescript").TextSpan): boolean;
    textSpanContainsPosition(span: import("typescript").TextSpan, position: number): boolean;
    textSpanContainsTextSpan(span: import("typescript").TextSpan, other: import("typescript").TextSpan): boolean;
    textSpanOverlapsWith(span: import("typescript").TextSpan, other: import("typescript").TextSpan): boolean;
    textSpanOverlap(span1: import("typescript").TextSpan, span2: import("typescript").TextSpan): import("typescript").TextSpan | undefined;
    textSpanIntersectsWithTextSpan(span: import("typescript").TextSpan, other: import("typescript").TextSpan): boolean;
    textSpanIntersectsWith(span: import("typescript").TextSpan, start: number, length: number): boolean;
    decodedTextSpanIntersectsWith(start1: number, length1: number, start2: number, length2: number): boolean;
    textSpanIntersectsWithPosition(span: import("typescript").TextSpan, position: number): boolean;
    textSpanIntersection(span1: import("typescript").TextSpan, span2: import("typescript").TextSpan): import("typescript").TextSpan | undefined;
    createTextSpan(start: number, length: number): import("typescript").TextSpan;
    createTextSpanFromBounds(start: number, end: number): import("typescript").TextSpan;
    textChangeRangeNewSpan(range: import("typescript").TextChangeRange): import("typescript").TextSpan;
    textChangeRangeIsUnchanged(range: import("typescript").TextChangeRange): boolean;
    createTextChangeRange(span: import("typescript").TextSpan, newLength: number): import("typescript").TextChangeRange;
    collapseTextChangeRangesAcrossMultipleVersions(changes: readonly import("typescript").TextChangeRange[]): import("typescript").TextChangeRange;
    getTypeParameterOwner(d: import("typescript").Declaration): import("typescript").Declaration | undefined;
    isParameterPropertyDeclaration(node: import("typescript").Node, parent: import("typescript").Node): node is import("typescript").ParameterPropertyDeclaration;
    isEmptyBindingPattern(node: import("typescript").BindingName): node is import("typescript").BindingPattern;
    isEmptyBindingElement(node: import("typescript").BindingElement | import("typescript").ArrayBindingElement): boolean;
    walkUpBindingElementsAndPatterns(binding: import("typescript").BindingElement): import("typescript").VariableDeclaration | import("typescript").ParameterDeclaration;
    getCombinedModifierFlags(node: import("typescript").Declaration): import("typescript").ModifierFlags;
    getCombinedNodeFlags(node: import("typescript").Node): import("typescript").NodeFlags;
    validateLocaleAndSetLanguage(locale: string, sys: {
        getExecutingFilePath(): string;
        resolvePath(path: string): string;
        fileExists(fileName: string): boolean;
        readFile(fileName: string): string | undefined;
    }, errors?: import("typescript").Diagnostic[]): void;
    getOriginalNode(node: import("typescript").Node): import("typescript").Node;
    getOriginalNode<T extends import("typescript").Node>(node: import("typescript").Node, nodeTest: (node: import("typescript").Node) => node is T): T;
    getOriginalNode(node: import("typescript").Node | undefined): import("typescript").Node | undefined;
    getOriginalNode<T extends import("typescript").Node>(node: import("typescript").Node | undefined, nodeTest: (node: import("typescript").Node) => node is T): T | undefined;
    findAncestor<T extends import("typescript").Node>(node: import("typescript").Node | undefined, callback: (element: import("typescript").Node) => element is T): T | undefined;
    findAncestor(node: import("typescript").Node | undefined, callback: (element: import("typescript").Node) => boolean | "quit"): import("typescript").Node | undefined;
    isParseTreeNode(node: import("typescript").Node): boolean;
    getParseTreeNode(node: import("typescript").Node | undefined): import("typescript").Node | undefined;
    getParseTreeNode<T extends import("typescript").Node>(node: T | undefined, nodeTest?: (node: import("typescript").Node) => node is T): T | undefined;
    escapeLeadingUnderscores(identifier: string): import("typescript").__String;
    unescapeLeadingUnderscores(identifier: import("typescript").__String): string;
    idText(identifierOrPrivateName: import("typescript").Identifier | import("typescript").PrivateIdentifier): string;
    identifierToKeywordKind(node: import("typescript").Identifier): import("typescript").KeywordSyntaxKind | undefined;
    symbolName(symbol: import("typescript").Symbol): string;
    getNameOfJSDocTypedef(declaration: import("typescript").JSDocTypedefTag): import("typescript").Identifier | import("typescript").PrivateIdentifier | undefined;
    getNameOfDeclaration(declaration: import("typescript").Declaration | import("typescript").Expression | undefined): import("typescript").DeclarationName | undefined;
    getDecorators(node: import("typescript").HasDecorators): readonly import("typescript").Decorator[] | undefined;
    getModifiers(node: import("typescript").HasModifiers): readonly import("typescript").Modifier[] | undefined;
    getJSDocParameterTags(param: import("typescript").ParameterDeclaration): readonly import("typescript").JSDocParameterTag[];
    getJSDocTypeParameterTags(param: import("typescript").TypeParameterDeclaration): readonly import("typescript").JSDocTemplateTag[];
    hasJSDocParameterTags(node: import("typescript").FunctionLikeDeclaration | import("typescript").SignatureDeclaration): boolean;
    getJSDocAugmentsTag(node: import("typescript").Node): import("typescript").JSDocAugmentsTag | undefined;
    getJSDocImplementsTags(node: import("typescript").Node): readonly import("typescript").JSDocImplementsTag[];
    getJSDocClassTag(node: import("typescript").Node): import("typescript").JSDocClassTag | undefined;
    getJSDocPublicTag(node: import("typescript").Node): import("typescript").JSDocPublicTag | undefined;
    getJSDocPrivateTag(node: import("typescript").Node): import("typescript").JSDocPrivateTag | undefined;
    getJSDocProtectedTag(node: import("typescript").Node): import("typescript").JSDocProtectedTag | undefined;
    getJSDocReadonlyTag(node: import("typescript").Node): import("typescript").JSDocReadonlyTag | undefined;
    getJSDocOverrideTagNoCache(node: import("typescript").Node): import("typescript").JSDocOverrideTag | undefined;
    getJSDocDeprecatedTag(node: import("typescript").Node): import("typescript").JSDocDeprecatedTag | undefined;
    getJSDocEnumTag(node: import("typescript").Node): import("typescript").JSDocEnumTag | undefined;
    getJSDocThisTag(node: import("typescript").Node): import("typescript").JSDocThisTag | undefined;
    getJSDocReturnTag(node: import("typescript").Node): import("typescript").JSDocReturnTag | undefined;
    getJSDocTemplateTag(node: import("typescript").Node): import("typescript").JSDocTemplateTag | undefined;
    getJSDocSatisfiesTag(node: import("typescript").Node): import("typescript").JSDocSatisfiesTag | undefined;
    getJSDocTypeTag(node: import("typescript").Node): import("typescript").JSDocTypeTag | undefined;
    getJSDocType(node: import("typescript").Node): import("typescript").TypeNode | undefined;
    getJSDocReturnType(node: import("typescript").Node): import("typescript").TypeNode | undefined;
    getJSDocTags(node: import("typescript").Node): readonly import("typescript").JSDocTag[];
    getAllJSDocTags<T extends import("typescript").JSDocTag>(node: import("typescript").Node, predicate: (tag: import("typescript").JSDocTag) => tag is T): readonly T[];
    getAllJSDocTagsOfKind(node: import("typescript").Node, kind: import("typescript").SyntaxKind): readonly import("typescript").JSDocTag[];
    getTextOfJSDocComment(comment?: string | import("typescript").NodeArray<import("typescript").JSDocComment>): string | undefined;
    getEffectiveTypeParameterDeclarations(node: import("typescript").DeclarationWithTypeParameters): readonly import("typescript").TypeParameterDeclaration[];
    getEffectiveConstraintOfTypeParameter(node: import("typescript").TypeParameterDeclaration): import("typescript").TypeNode | undefined;
    isMemberName(node: import("typescript").Node): node is import("typescript").MemberName;
    isPropertyAccessChain(node: import("typescript").Node): node is import("typescript").PropertyAccessChain;
    isElementAccessChain(node: import("typescript").Node): node is import("typescript").ElementAccessChain;
    isCallChain(node: import("typescript").Node): node is import("typescript").CallChain;
    isOptionalChain(node: import("typescript").Node): node is import("typescript").PropertyAccessChain | import("typescript").ElementAccessChain | import("typescript").CallChain | import("typescript").NonNullChain;
    isNullishCoalesce(node: import("typescript").Node): boolean;
    isConstTypeReference(node: import("typescript").Node): boolean;
    skipPartiallyEmittedExpressions(node: import("typescript").Expression): import("typescript").Expression;
    skipPartiallyEmittedExpressions(node: import("typescript").Node): import("typescript").Node;
    isNonNullChain(node: import("typescript").Node): node is import("typescript").NonNullChain;
    isBreakOrContinueStatement(node: import("typescript").Node): node is import("typescript").BreakOrContinueStatement;
    isNamedExportBindings(node: import("typescript").Node): node is import("typescript").NamedExportBindings;
    isJSDocPropertyLikeTag(node: import("typescript").Node): node is import("typescript").JSDocPropertyLikeTag;
    isTokenKind(kind: import("typescript").SyntaxKind): boolean;
    isToken(n: import("typescript").Node): boolean;
    isLiteralExpression(node: import("typescript").Node): node is import("typescript").LiteralExpression;
    isTemplateLiteralToken(node: import("typescript").Node): node is import("typescript").TemplateLiteralToken;
    isTemplateMiddleOrTemplateTail(node: import("typescript").Node): node is import("typescript").TemplateMiddle | import("typescript").TemplateTail;
    isImportOrExportSpecifier(node: import("typescript").Node): node is import("typescript").ImportSpecifier | import("typescript").ExportSpecifier;
    isTypeOnlyImportDeclaration(node: import("typescript").Node): node is import("typescript").TypeOnlyImportDeclaration;
    isTypeOnlyExportDeclaration(node: import("typescript").Node): node is import("typescript").TypeOnlyExportDeclaration;
    isTypeOnlyImportOrExportDeclaration(node: import("typescript").Node): node is import("typescript").TypeOnlyAliasDeclaration;
    isStringTextContainingNode(node: import("typescript").Node): node is import("typescript").StringLiteral | import("typescript").TemplateLiteralToken;
    isImportAttributeName(node: import("typescript").Node): node is import("typescript").ImportAttributeName;
    isModifier(node: import("typescript").Node): node is import("typescript").Modifier;
    isEntityName(node: import("typescript").Node): node is import("typescript").EntityName;
    isPropertyName(node: import("typescript").Node): node is import("typescript").PropertyName;
    isBindingName(node: import("typescript").Node): node is import("typescript").BindingName;
    isFunctionLike(node: import("typescript").Node | undefined): node is import("typescript").SignatureDeclaration;
    isClassElement(node: import("typescript").Node): node is import("typescript").ClassElement;
    isClassLike(node: import("typescript").Node): node is import("typescript").ClassLikeDeclaration;
    isAccessor(node: import("typescript").Node): node is import("typescript").AccessorDeclaration;
    isAutoAccessorPropertyDeclaration(node: import("typescript").Node): node is import("typescript").AutoAccessorPropertyDeclaration;
    isModifierLike(node: import("typescript").Node): node is import("typescript").ModifierLike;
    isTypeElement(node: import("typescript").Node): node is import("typescript").TypeElement;
    isClassOrTypeElement(node: import("typescript").Node): node is import("typescript").ClassElement | import("typescript").TypeElement;
    isObjectLiteralElementLike(node: import("typescript").Node): node is import("typescript").ObjectLiteralElementLike;
    isTypeNode(node: import("typescript").Node): node is import("typescript").TypeNode;
    isFunctionOrConstructorTypeNode(node: import("typescript").Node): node is import("typescript").FunctionTypeNode | import("typescript").ConstructorTypeNode;
    isArrayBindingElement(node: import("typescript").Node): node is import("typescript").ArrayBindingElement;
    isPropertyAccessOrQualifiedName(node: import("typescript").Node): node is import("typescript").PropertyAccessExpression | import("typescript").QualifiedName;
    isCallLikeExpression(node: import("typescript").Node): node is import("typescript").CallLikeExpression;
    isCallOrNewExpression(node: import("typescript").Node): node is import("typescript").CallExpression | import("typescript").NewExpression;
    isTemplateLiteral(node: import("typescript").Node): node is import("typescript").TemplateLiteral;
    isLeftHandSideExpression(node: import("typescript").Node): node is import("typescript").LeftHandSideExpression;
    isLiteralTypeLiteral(node: import("typescript").Node): node is import("typescript").NullLiteral | import("typescript").BooleanLiteral | import("typescript").LiteralExpression | import("typescript").PrefixUnaryExpression;
    isExpression(node: import("typescript").Node): node is import("typescript").Expression;
    isAssertionExpression(node: import("typescript").Node): node is import("typescript").AssertionExpression;
    isIterationStatement(node: import("typescript").Node, lookInLabeledStatements: false): node is import("typescript").IterationStatement;
    isIterationStatement(node: import("typescript").Node, lookInLabeledStatements: boolean): node is import("typescript").IterationStatement | import("typescript").LabeledStatement;
    isConciseBody(node: import("typescript").Node): node is import("typescript").ConciseBody;
    isForInitializer(node: import("typescript").Node): node is import("typescript").ForInitializer;
    isModuleBody(node: import("typescript").Node): node is import("typescript").ModuleBody;
    isNamedImportBindings(node: import("typescript").Node): node is import("typescript").NamedImportBindings;
    isDeclarationStatement(node: import("typescript").Node): node is import("typescript").DeclarationStatement;
    isStatement(node: import("typescript").Node): node is import("typescript").Statement;
    isModuleReference(node: import("typescript").Node): node is import("typescript").ModuleReference;
    isJsxTagNameExpression(node: import("typescript").Node): node is import("typescript").JsxTagNameExpression;
    isJsxChild(node: import("typescript").Node): node is import("typescript").JsxChild;
    isJsxAttributeLike(node: import("typescript").Node): node is import("typescript").JsxAttributeLike;
    isStringLiteralOrJsxExpression(node: import("typescript").Node): node is import("typescript").StringLiteral | import("typescript").JsxExpression;
    isJsxOpeningLikeElement(node: import("typescript").Node): node is import("typescript").JsxOpeningLikeElement;
    isCaseOrDefaultClause(node: import("typescript").Node): node is import("typescript").CaseOrDefaultClause;
    isJSDocCommentContainingNode(node: import("typescript").Node): boolean;
    isSetAccessor(node: import("typescript").Node): node is import("typescript").SetAccessorDeclaration;
    isGetAccessor(node: import("typescript").Node): node is import("typescript").GetAccessorDeclaration;
    hasOnlyExpressionInitializer(node: import("typescript").Node): node is import("typescript").HasExpressionInitializer;
    isObjectLiteralElement(node: import("typescript").Node): node is import("typescript").ObjectLiteralElement;
    isStringLiteralLike(node: import("typescript").Node | import("typescript").FileReference): node is import("typescript").StringLiteralLike;
    isJSDocLinkLike(node: import("typescript").Node): node is import("typescript").JSDocLink | import("typescript").JSDocLinkCode | import("typescript").JSDocLinkPlain;
    hasRestParameter(s: import("typescript").SignatureDeclaration | import("typescript").JSDocSignature): boolean;
    isRestParameter(node: import("typescript").ParameterDeclaration | import("typescript").JSDocParameterTag): boolean;
    isInternalDeclaration(node: import("typescript").Node, sourceFile?: import("typescript").SourceFile): boolean;
    isPartOfTypeNode(node: import("typescript").Node): boolean;
    getJSDocCommentsAndTags(hostNode: import("typescript").Node): readonly (import("typescript").JSDoc | import("typescript").JSDocTag)[];
    createSourceMapSource(fileName: string, text: string, skipTrivia?: (pos: number) => number): import("typescript").SourceMapSource;
    setOriginalNode<T extends import("typescript").Node>(node: T, original: import("typescript").Node | undefined): T;
    disposeEmitNodes(sourceFile: import("typescript").SourceFile | undefined): void;
    setEmitFlags<T extends import("typescript").Node>(node: T, emitFlags: import("typescript").EmitFlags): T;
    getSourceMapRange(node: import("typescript").Node): import("typescript").SourceMapRange;
    setSourceMapRange<T extends import("typescript").Node>(node: T, range: import("typescript").SourceMapRange | undefined): T;
    getTokenSourceMapRange(node: import("typescript").Node, token: import("typescript").SyntaxKind): import("typescript").SourceMapRange | undefined;
    setTokenSourceMapRange<T extends import("typescript").Node>(node: T, token: import("typescript").SyntaxKind, range: import("typescript").SourceMapRange | undefined): T;
    getCommentRange(node: import("typescript").Node): import("typescript").TextRange;
    setCommentRange<T extends import("typescript").Node>(node: T, range: import("typescript").TextRange): T;
    getSyntheticLeadingComments(node: import("typescript").Node): import("typescript").SynthesizedComment[] | undefined;
    setSyntheticLeadingComments<T extends import("typescript").Node>(node: T, comments: import("typescript").SynthesizedComment[] | undefined): T;
    addSyntheticLeadingComment<T extends import("typescript").Node>(node: T, kind: import("typescript").SyntaxKind.SingleLineCommentTrivia | import("typescript").SyntaxKind.MultiLineCommentTrivia, text: string, hasTrailingNewLine?: boolean): T;
    getSyntheticTrailingComments(node: import("typescript").Node): import("typescript").SynthesizedComment[] | undefined;
    setSyntheticTrailingComments<T extends import("typescript").Node>(node: T, comments: import("typescript").SynthesizedComment[] | undefined): T;
    addSyntheticTrailingComment<T extends import("typescript").Node>(node: T, kind: import("typescript").SyntaxKind.SingleLineCommentTrivia | import("typescript").SyntaxKind.MultiLineCommentTrivia, text: string, hasTrailingNewLine?: boolean): T;
    moveSyntheticComments<T extends import("typescript").Node>(node: T, original: import("typescript").Node): T;
    getConstantValue(node: import("typescript").AccessExpression): string | number | undefined;
    setConstantValue(node: import("typescript").AccessExpression, value: string | number): import("typescript").AccessExpression;
    addEmitHelper<T extends import("typescript").Node>(node: T, helper: import("typescript").EmitHelper): T;
    addEmitHelpers<T extends import("typescript").Node>(node: T, helpers: import("typescript").EmitHelper[] | undefined): T;
    removeEmitHelper(node: import("typescript").Node, helper: import("typescript").EmitHelper): boolean;
    getEmitHelpers(node: import("typescript").Node): import("typescript").EmitHelper[] | undefined;
    moveEmitHelpers(source: import("typescript").Node, target: import("typescript").Node, predicate: (helper: import("typescript").EmitHelper) => boolean): void;
    isNumericLiteral(node: import("typescript").Node): node is import("typescript").NumericLiteral;
    isBigIntLiteral(node: import("typescript").Node): node is import("typescript").BigIntLiteral;
    isStringLiteral(node: import("typescript").Node): node is import("typescript").StringLiteral;
    isJsxText(node: import("typescript").Node): node is import("typescript").JsxText;
    isRegularExpressionLiteral(node: import("typescript").Node): node is import("typescript").RegularExpressionLiteral;
    isNoSubstitutionTemplateLiteral(node: import("typescript").Node): node is import("typescript").NoSubstitutionTemplateLiteral;
    isTemplateHead(node: import("typescript").Node): node is import("typescript").TemplateHead;
    isTemplateMiddle(node: import("typescript").Node): node is import("typescript").TemplateMiddle;
    isTemplateTail(node: import("typescript").Node): node is import("typescript").TemplateTail;
    isDotDotDotToken(node: import("typescript").Node): node is import("typescript").DotDotDotToken;
    isPlusToken(node: import("typescript").Node): node is import("typescript").PlusToken;
    isMinusToken(node: import("typescript").Node): node is import("typescript").MinusToken;
    isAsteriskToken(node: import("typescript").Node): node is import("typescript").AsteriskToken;
    isExclamationToken(node: import("typescript").Node): node is import("typescript").ExclamationToken;
    isQuestionToken(node: import("typescript").Node): node is import("typescript").QuestionToken;
    isColonToken(node: import("typescript").Node): node is import("typescript").ColonToken;
    isQuestionDotToken(node: import("typescript").Node): node is import("typescript").QuestionDotToken;
    isEqualsGreaterThanToken(node: import("typescript").Node): node is import("typescript").EqualsGreaterThanToken;
    isIdentifier(node: import("typescript").Node): node is import("typescript").Identifier;
    isPrivateIdentifier(node: import("typescript").Node): node is import("typescript").PrivateIdentifier;
    isAssertsKeyword(node: import("typescript").Node): node is import("typescript").AssertsKeyword;
    isAwaitKeyword(node: import("typescript").Node): node is import("typescript").AwaitKeyword;
    isQualifiedName(node: import("typescript").Node): node is import("typescript").QualifiedName;
    isComputedPropertyName(node: import("typescript").Node): node is import("typescript").ComputedPropertyName;
    isTypeParameterDeclaration(node: import("typescript").Node): node is import("typescript").TypeParameterDeclaration;
    isParameter(node: import("typescript").Node): node is import("typescript").ParameterDeclaration;
    isDecorator(node: import("typescript").Node): node is import("typescript").Decorator;
    isPropertySignature(node: import("typescript").Node): node is import("typescript").PropertySignature;
    isPropertyDeclaration(node: import("typescript").Node): node is import("typescript").PropertyDeclaration;
    isMethodSignature(node: import("typescript").Node): node is import("typescript").MethodSignature;
    isMethodDeclaration(node: import("typescript").Node): node is import("typescript").MethodDeclaration;
    isClassStaticBlockDeclaration(node: import("typescript").Node): node is import("typescript").ClassStaticBlockDeclaration;
    isConstructorDeclaration(node: import("typescript").Node): node is import("typescript").ConstructorDeclaration;
    isGetAccessorDeclaration(node: import("typescript").Node): node is import("typescript").GetAccessorDeclaration;
    isSetAccessorDeclaration(node: import("typescript").Node): node is import("typescript").SetAccessorDeclaration;
    isCallSignatureDeclaration(node: import("typescript").Node): node is import("typescript").CallSignatureDeclaration;
    isConstructSignatureDeclaration(node: import("typescript").Node): node is import("typescript").ConstructSignatureDeclaration;
    isIndexSignatureDeclaration(node: import("typescript").Node): node is import("typescript").IndexSignatureDeclaration;
    isTypePredicateNode(node: import("typescript").Node): node is import("typescript").TypePredicateNode;
    isTypeReferenceNode(node: import("typescript").Node): node is import("typescript").TypeReferenceNode;
    isFunctionTypeNode(node: import("typescript").Node): node is import("typescript").FunctionTypeNode;
    isConstructorTypeNode(node: import("typescript").Node): node is import("typescript").ConstructorTypeNode;
    isTypeQueryNode(node: import("typescript").Node): node is import("typescript").TypeQueryNode;
    isTypeLiteralNode(node: import("typescript").Node): node is import("typescript").TypeLiteralNode;
    isArrayTypeNode(node: import("typescript").Node): node is import("typescript").ArrayTypeNode;
    isTupleTypeNode(node: import("typescript").Node): node is import("typescript").TupleTypeNode;
    isNamedTupleMember(node: import("typescript").Node): node is import("typescript").NamedTupleMember;
    isOptionalTypeNode(node: import("typescript").Node): node is import("typescript").OptionalTypeNode;
    isRestTypeNode(node: import("typescript").Node): node is import("typescript").RestTypeNode;
    isUnionTypeNode(node: import("typescript").Node): node is import("typescript").UnionTypeNode;
    isIntersectionTypeNode(node: import("typescript").Node): node is import("typescript").IntersectionTypeNode;
    isConditionalTypeNode(node: import("typescript").Node): node is import("typescript").ConditionalTypeNode;
    isInferTypeNode(node: import("typescript").Node): node is import("typescript").InferTypeNode;
    isParenthesizedTypeNode(node: import("typescript").Node): node is import("typescript").ParenthesizedTypeNode;
    isThisTypeNode(node: import("typescript").Node): node is import("typescript").ThisTypeNode;
    isTypeOperatorNode(node: import("typescript").Node): node is import("typescript").TypeOperatorNode;
    isIndexedAccessTypeNode(node: import("typescript").Node): node is import("typescript").IndexedAccessTypeNode;
    isMappedTypeNode(node: import("typescript").Node): node is import("typescript").MappedTypeNode;
    isLiteralTypeNode(node: import("typescript").Node): node is import("typescript").LiteralTypeNode;
    isImportTypeNode(node: import("typescript").Node): node is import("typescript").ImportTypeNode;
    isTemplateLiteralTypeSpan(node: import("typescript").Node): node is import("typescript").TemplateLiteralTypeSpan;
    isTemplateLiteralTypeNode(node: import("typescript").Node): node is import("typescript").TemplateLiteralTypeNode;
    isObjectBindingPattern(node: import("typescript").Node): node is import("typescript").ObjectBindingPattern;
    isArrayBindingPattern(node: import("typescript").Node): node is import("typescript").ArrayBindingPattern;
    isBindingElement(node: import("typescript").Node): node is import("typescript").BindingElement;
    isArrayLiteralExpression(node: import("typescript").Node): node is import("typescript").ArrayLiteralExpression;
    isObjectLiteralExpression(node: import("typescript").Node): node is import("typescript").ObjectLiteralExpression;
    isPropertyAccessExpression(node: import("typescript").Node): node is import("typescript").PropertyAccessExpression;
    isElementAccessExpression(node: import("typescript").Node): node is import("typescript").ElementAccessExpression;
    isCallExpression(node: import("typescript").Node): node is import("typescript").CallExpression;
    isNewExpression(node: import("typescript").Node): node is import("typescript").NewExpression;
    isTaggedTemplateExpression(node: import("typescript").Node): node is import("typescript").TaggedTemplateExpression;
    isTypeAssertionExpression(node: import("typescript").Node): node is import("typescript").TypeAssertion;
    isParenthesizedExpression(node: import("typescript").Node): node is import("typescript").ParenthesizedExpression;
    isFunctionExpression(node: import("typescript").Node): node is import("typescript").FunctionExpression;
    isArrowFunction(node: import("typescript").Node): node is import("typescript").ArrowFunction;
    isDeleteExpression(node: import("typescript").Node): node is import("typescript").DeleteExpression;
    isTypeOfExpression(node: import("typescript").Node): node is import("typescript").TypeOfExpression;
    isVoidExpression(node: import("typescript").Node): node is import("typescript").VoidExpression;
    isAwaitExpression(node: import("typescript").Node): node is import("typescript").AwaitExpression;
    isPrefixUnaryExpression(node: import("typescript").Node): node is import("typescript").PrefixUnaryExpression;
    isPostfixUnaryExpression(node: import("typescript").Node): node is import("typescript").PostfixUnaryExpression;
    isBinaryExpression(node: import("typescript").Node): node is import("typescript").BinaryExpression;
    isConditionalExpression(node: import("typescript").Node): node is import("typescript").ConditionalExpression;
    isTemplateExpression(node: import("typescript").Node): node is import("typescript").TemplateExpression;
    isYieldExpression(node: import("typescript").Node): node is import("typescript").YieldExpression;
    isSpreadElement(node: import("typescript").Node): node is import("typescript").SpreadElement;
    isClassExpression(node: import("typescript").Node): node is import("typescript").ClassExpression;
    isOmittedExpression(node: import("typescript").Node): node is import("typescript").OmittedExpression;
    isExpressionWithTypeArguments(node: import("typescript").Node): node is import("typescript").ExpressionWithTypeArguments;
    isAsExpression(node: import("typescript").Node): node is import("typescript").AsExpression;
    isSatisfiesExpression(node: import("typescript").Node): node is import("typescript").SatisfiesExpression;
    isNonNullExpression(node: import("typescript").Node): node is import("typescript").NonNullExpression;
    isMetaProperty(node: import("typescript").Node): node is import("typescript").MetaProperty;
    isSyntheticExpression(node: import("typescript").Node): node is import("typescript").SyntheticExpression;
    isPartiallyEmittedExpression(node: import("typescript").Node): node is import("typescript").PartiallyEmittedExpression;
    isCommaListExpression(node: import("typescript").Node): node is import("typescript").CommaListExpression;
    isTemplateSpan(node: import("typescript").Node): node is import("typescript").TemplateSpan;
    isSemicolonClassElement(node: import("typescript").Node): node is import("typescript").SemicolonClassElement;
    isBlock(node: import("typescript").Node): node is import("typescript").Block;
    isVariableStatement(node: import("typescript").Node): node is import("typescript").VariableStatement;
    isEmptyStatement(node: import("typescript").Node): node is import("typescript").EmptyStatement;
    isExpressionStatement(node: import("typescript").Node): node is import("typescript").ExpressionStatement;
    isIfStatement(node: import("typescript").Node): node is import("typescript").IfStatement;
    isDoStatement(node: import("typescript").Node): node is import("typescript").DoStatement;
    isWhileStatement(node: import("typescript").Node): node is import("typescript").WhileStatement;
    isForStatement(node: import("typescript").Node): node is import("typescript").ForStatement;
    isForInStatement(node: import("typescript").Node): node is import("typescript").ForInStatement;
    isForOfStatement(node: import("typescript").Node): node is import("typescript").ForOfStatement;
    isContinueStatement(node: import("typescript").Node): node is import("typescript").ContinueStatement;
    isBreakStatement(node: import("typescript").Node): node is import("typescript").BreakStatement;
    isReturnStatement(node: import("typescript").Node): node is import("typescript").ReturnStatement;
    isWithStatement(node: import("typescript").Node): node is import("typescript").WithStatement;
    isSwitchStatement(node: import("typescript").Node): node is import("typescript").SwitchStatement;
    isLabeledStatement(node: import("typescript").Node): node is import("typescript").LabeledStatement;
    isThrowStatement(node: import("typescript").Node): node is import("typescript").ThrowStatement;
    isTryStatement(node: import("typescript").Node): node is import("typescript").TryStatement;
    isDebuggerStatement(node: import("typescript").Node): node is import("typescript").DebuggerStatement;
    isVariableDeclaration(node: import("typescript").Node): node is import("typescript").VariableDeclaration;
    isVariableDeclarationList(node: import("typescript").Node): node is import("typescript").VariableDeclarationList;
    isFunctionDeclaration(node: import("typescript").Node): node is import("typescript").FunctionDeclaration;
    isClassDeclaration(node: import("typescript").Node): node is import("typescript").ClassDeclaration;
    isInterfaceDeclaration(node: import("typescript").Node): node is import("typescript").InterfaceDeclaration;
    isTypeAliasDeclaration(node: import("typescript").Node): node is import("typescript").TypeAliasDeclaration;
    isEnumDeclaration(node: import("typescript").Node): node is import("typescript").EnumDeclaration;
    isModuleDeclaration(node: import("typescript").Node): node is import("typescript").ModuleDeclaration;
    isModuleBlock(node: import("typescript").Node): node is import("typescript").ModuleBlock;
    isCaseBlock(node: import("typescript").Node): node is import("typescript").CaseBlock;
    isNamespaceExportDeclaration(node: import("typescript").Node): node is import("typescript").NamespaceExportDeclaration;
    isImportEqualsDeclaration(node: import("typescript").Node): node is import("typescript").ImportEqualsDeclaration;
    isImportDeclaration(node: import("typescript").Node): node is import("typescript").ImportDeclaration;
    isImportClause(node: import("typescript").Node): node is import("typescript").ImportClause;
    isImportTypeAssertionContainer(node: import("typescript").Node): node is import("typescript").ImportTypeAssertionContainer;
    isAssertClause(node: import("typescript").Node): node is import("typescript").AssertClause;
    isAssertEntry(node: import("typescript").Node): node is import("typescript").AssertEntry;
    isImportAttributes(node: import("typescript").Node): node is import("typescript").ImportAttributes;
    isImportAttribute(node: import("typescript").Node): node is import("typescript").ImportAttribute;
    isNamespaceImport(node: import("typescript").Node): node is import("typescript").NamespaceImport;
    isNamespaceExport(node: import("typescript").Node): node is import("typescript").NamespaceExport;
    isNamedImports(node: import("typescript").Node): node is import("typescript").NamedImports;
    isImportSpecifier(node: import("typescript").Node): node is import("typescript").ImportSpecifier;
    isExportAssignment(node: import("typescript").Node): node is import("typescript").ExportAssignment;
    isExportDeclaration(node: import("typescript").Node): node is import("typescript").ExportDeclaration;
    isNamedExports(node: import("typescript").Node): node is import("typescript").NamedExports;
    isExportSpecifier(node: import("typescript").Node): node is import("typescript").ExportSpecifier;
    isModuleExportName(node: import("typescript").Node): node is import("typescript").ModuleExportName;
    isMissingDeclaration(node: import("typescript").Node): node is import("typescript").MissingDeclaration;
    isNotEmittedStatement(node: import("typescript").Node): node is import("typescript").NotEmittedStatement;
    isExternalModuleReference(node: import("typescript").Node): node is import("typescript").ExternalModuleReference;
    isJsxElement(node: import("typescript").Node): node is import("typescript").JsxElement;
    isJsxSelfClosingElement(node: import("typescript").Node): node is import("typescript").JsxSelfClosingElement;
    isJsxOpeningElement(node: import("typescript").Node): node is import("typescript").JsxOpeningElement;
    isJsxClosingElement(node: import("typescript").Node): node is import("typescript").JsxClosingElement;
    isJsxFragment(node: import("typescript").Node): node is import("typescript").JsxFragment;
    isJsxOpeningFragment(node: import("typescript").Node): node is import("typescript").JsxOpeningFragment;
    isJsxClosingFragment(node: import("typescript").Node): node is import("typescript").JsxClosingFragment;
    isJsxAttribute(node: import("typescript").Node): node is import("typescript").JsxAttribute;
    isJsxAttributes(node: import("typescript").Node): node is import("typescript").JsxAttributes;
    isJsxSpreadAttribute(node: import("typescript").Node): node is import("typescript").JsxSpreadAttribute;
    isJsxExpression(node: import("typescript").Node): node is import("typescript").JsxExpression;
    isJsxNamespacedName(node: import("typescript").Node): node is import("typescript").JsxNamespacedName;
    isCaseClause(node: import("typescript").Node): node is import("typescript").CaseClause;
    isDefaultClause(node: import("typescript").Node): node is import("typescript").DefaultClause;
    isHeritageClause(node: import("typescript").Node): node is import("typescript").HeritageClause;
    isCatchClause(node: import("typescript").Node): node is import("typescript").CatchClause;
    isPropertyAssignment(node: import("typescript").Node): node is import("typescript").PropertyAssignment;
    isShorthandPropertyAssignment(node: import("typescript").Node): node is import("typescript").ShorthandPropertyAssignment;
    isSpreadAssignment(node: import("typescript").Node): node is import("typescript").SpreadAssignment;
    isEnumMember(node: import("typescript").Node): node is import("typescript").EnumMember;
    isSourceFile(node: import("typescript").Node): node is import("typescript").SourceFile;
    isBundle(node: import("typescript").Node): node is import("typescript").Bundle;
    isJSDocTypeExpression(node: import("typescript").Node): node is import("typescript").JSDocTypeExpression;
    isJSDocNameReference(node: import("typescript").Node): node is import("typescript").JSDocNameReference;
    isJSDocMemberName(node: import("typescript").Node): node is import("typescript").JSDocMemberName;
    isJSDocLink(node: import("typescript").Node): node is import("typescript").JSDocLink;
    isJSDocLinkCode(node: import("typescript").Node): node is import("typescript").JSDocLinkCode;
    isJSDocLinkPlain(node: import("typescript").Node): node is import("typescript").JSDocLinkPlain;
    isJSDocAllType(node: import("typescript").Node): node is import("typescript").JSDocAllType;
    isJSDocUnknownType(node: import("typescript").Node): node is import("typescript").JSDocUnknownType;
    isJSDocNullableType(node: import("typescript").Node): node is import("typescript").JSDocNullableType;
    isJSDocNonNullableType(node: import("typescript").Node): node is import("typescript").JSDocNonNullableType;
    isJSDocOptionalType(node: import("typescript").Node): node is import("typescript").JSDocOptionalType;
    isJSDocFunctionType(node: import("typescript").Node): node is import("typescript").JSDocFunctionType;
    isJSDocVariadicType(node: import("typescript").Node): node is import("typescript").JSDocVariadicType;
    isJSDocNamepathType(node: import("typescript").Node): node is import("typescript").JSDocNamepathType;
    isJSDoc(node: import("typescript").Node): node is import("typescript").JSDoc;
    isJSDocTypeLiteral(node: import("typescript").Node): node is import("typescript").JSDocTypeLiteral;
    isJSDocSignature(node: import("typescript").Node): node is import("typescript").JSDocSignature;
    isJSDocAugmentsTag(node: import("typescript").Node): node is import("typescript").JSDocAugmentsTag;
    isJSDocAuthorTag(node: import("typescript").Node): node is import("typescript").JSDocAuthorTag;
    isJSDocClassTag(node: import("typescript").Node): node is import("typescript").JSDocClassTag;
    isJSDocCallbackTag(node: import("typescript").Node): node is import("typescript").JSDocCallbackTag;
    isJSDocPublicTag(node: import("typescript").Node): node is import("typescript").JSDocPublicTag;
    isJSDocPrivateTag(node: import("typescript").Node): node is import("typescript").JSDocPrivateTag;
    isJSDocProtectedTag(node: import("typescript").Node): node is import("typescript").JSDocProtectedTag;
    isJSDocReadonlyTag(node: import("typescript").Node): node is import("typescript").JSDocReadonlyTag;
    isJSDocOverrideTag(node: import("typescript").Node): node is import("typescript").JSDocOverrideTag;
    isJSDocOverloadTag(node: import("typescript").Node): node is import("typescript").JSDocOverloadTag;
    isJSDocDeprecatedTag(node: import("typescript").Node): node is import("typescript").JSDocDeprecatedTag;
    isJSDocSeeTag(node: import("typescript").Node): node is import("typescript").JSDocSeeTag;
    isJSDocEnumTag(node: import("typescript").Node): node is import("typescript").JSDocEnumTag;
    isJSDocParameterTag(node: import("typescript").Node): node is import("typescript").JSDocParameterTag;
    isJSDocReturnTag(node: import("typescript").Node): node is import("typescript").JSDocReturnTag;
    isJSDocThisTag(node: import("typescript").Node): node is import("typescript").JSDocThisTag;
    isJSDocTypeTag(node: import("typescript").Node): node is import("typescript").JSDocTypeTag;
    isJSDocTemplateTag(node: import("typescript").Node): node is import("typescript").JSDocTemplateTag;
    isJSDocTypedefTag(node: import("typescript").Node): node is import("typescript").JSDocTypedefTag;
    isJSDocUnknownTag(node: import("typescript").Node): node is import("typescript").JSDocUnknownTag;
    isJSDocPropertyTag(node: import("typescript").Node): node is import("typescript").JSDocPropertyTag;
    isJSDocImplementsTag(node: import("typescript").Node): node is import("typescript").JSDocImplementsTag;
    isJSDocSatisfiesTag(node: import("typescript").Node): node is import("typescript").JSDocSatisfiesTag;
    isJSDocThrowsTag(node: import("typescript").Node): node is import("typescript").JSDocThrowsTag;
    isJSDocImportTag(node: import("typescript").Node): node is import("typescript").JSDocImportTag;
    isQuestionOrExclamationToken(node: import("typescript").Node): node is import("typescript").QuestionToken | import("typescript").ExclamationToken;
    isIdentifierOrThisTypeNode(node: import("typescript").Node): node is import("typescript").Identifier | import("typescript").ThisTypeNode;
    isReadonlyKeywordOrPlusOrMinusToken(node: import("typescript").Node): node is import("typescript").ReadonlyKeyword | import("typescript").PlusToken | import("typescript").MinusToken;
    isQuestionOrPlusOrMinusToken(node: import("typescript").Node): node is import("typescript").QuestionToken | import("typescript").PlusToken | import("typescript").MinusToken;
    isModuleName(node: import("typescript").Node): node is import("typescript").ModuleName;
    isBinaryOperatorToken(node: import("typescript").Node): node is import("typescript").BinaryOperatorToken;
    setTextRange<T extends import("typescript").TextRange>(range: T, location: import("typescript").TextRange | undefined): T;
    canHaveModifiers(node: import("typescript").Node): node is import("typescript").HasModifiers;
    canHaveDecorators(node: import("typescript").Node): node is import("typescript").HasDecorators;
    forEachChild<T>(node: import("typescript").Node, cbNode: (node: import("typescript").Node) => T | undefined, cbNodes?: (nodes: import("typescript").NodeArray<import("typescript").Node>) => T | undefined): T | undefined;
    createSourceFile(fileName: string, sourceText: string, languageVersionOrOptions: import("typescript").ScriptTarget | import("typescript").CreateSourceFileOptions, setParentNodes?: boolean, scriptKind?: import("typescript").ScriptKind): import("typescript").SourceFile;
    parseIsolatedEntityName(text: string, languageVersion: import("typescript").ScriptTarget): import("typescript").EntityName | undefined;
    parseJsonText(fileName: string, sourceText: string): import("typescript").JsonSourceFile;
    isExternalModule(file: import("typescript").SourceFile): boolean;
    updateSourceFile(sourceFile: import("typescript").SourceFile, newText: string, textChangeRange: import("typescript").TextChangeRange, aggressiveChecks?: boolean): import("typescript").SourceFile;
    parseCommandLine(commandLine: readonly string[], readFile?: (path: string) => string | undefined): import("typescript").ParsedCommandLine;
    getParsedCommandLineOfConfigFile(configFileName: string, optionsToExtend: import("typescript").CompilerOptions | undefined, host: import("typescript").ParseConfigFileHost, extendedConfigCache?: Map<string, import("typescript").ExtendedConfigCacheEntry>, watchOptionsToExtend?: import("typescript").WatchOptions, extraFileExtensions?: readonly import("typescript").FileExtensionInfo[]): import("typescript").ParsedCommandLine | undefined;
    readConfigFile(fileName: string, readFile: (path: string) => string | undefined): {
        config?: any;
        error?: import("typescript").Diagnostic;
    };
    parseConfigFileTextToJson(fileName: string, jsonText: string): {
        config?: any;
        error?: import("typescript").Diagnostic;
    };
    readJsonConfigFile(fileName: string, readFile: (path: string) => string | undefined): import("typescript").TsConfigSourceFile;
    convertToObject(sourceFile: import("typescript").JsonSourceFile, errors: import("typescript").Diagnostic[]): any;
    parseJsonConfigFileContent(json: any, host: import("typescript").ParseConfigHost, basePath: string, existingOptions?: import("typescript").CompilerOptions, configFileName?: string, resolutionStack?: import("typescript").Path[], extraFileExtensions?: readonly import("typescript").FileExtensionInfo[], extendedConfigCache?: Map<string, import("typescript").ExtendedConfigCacheEntry>, existingWatchOptions?: import("typescript").WatchOptions): import("typescript").ParsedCommandLine;
    parseJsonSourceFileConfigFileContent(sourceFile: import("typescript").TsConfigSourceFile, host: import("typescript").ParseConfigHost, basePath: string, existingOptions?: import("typescript").CompilerOptions, configFileName?: string, resolutionStack?: import("typescript").Path[], extraFileExtensions?: readonly import("typescript").FileExtensionInfo[], extendedConfigCache?: Map<string, import("typescript").ExtendedConfigCacheEntry>, existingWatchOptions?: import("typescript").WatchOptions): import("typescript").ParsedCommandLine;
    convertCompilerOptionsFromJson(jsonOptions: any, basePath: string, configFileName?: string): {
        options: import("typescript").CompilerOptions;
        errors: import("typescript").Diagnostic[];
    };
    convertTypeAcquisitionFromJson(jsonOptions: any, basePath: string, configFileName?: string): {
        options: import("typescript").TypeAcquisition;
        errors: import("typescript").Diagnostic[];
    };
    getEffectiveTypeRoots(options: import("typescript").CompilerOptions, host: import("typescript").GetEffectiveTypeRootsHost): string[] | undefined;
    resolveTypeReferenceDirective(typeReferenceDirectiveName: string, containingFile: string | undefined, options: import("typescript").CompilerOptions, host: import("typescript").ModuleResolutionHost, redirectedReference?: import("typescript").ResolvedProjectReference, cache?: import("typescript").TypeReferenceDirectiveResolutionCache, resolutionMode?: import("typescript").ResolutionMode): import("typescript").ResolvedTypeReferenceDirectiveWithFailedLookupLocations;
    getAutomaticTypeDirectiveNames(options: import("typescript").CompilerOptions, host: import("typescript").ModuleResolutionHost): string[];
    createModuleResolutionCache(currentDirectory: string, getCanonicalFileName: (s: string) => string, options?: import("typescript").CompilerOptions, packageJsonInfoCache?: import("typescript").PackageJsonInfoCache): import("typescript").ModuleResolutionCache;
    createTypeReferenceDirectiveResolutionCache(currentDirectory: string, getCanonicalFileName: (s: string) => string, options?: import("typescript").CompilerOptions, packageJsonInfoCache?: import("typescript").PackageJsonInfoCache): import("typescript").TypeReferenceDirectiveResolutionCache;
    resolveModuleNameFromCache(moduleName: string, containingFile: string, cache: import("typescript").ModuleResolutionCache, mode?: import("typescript").ResolutionMode): import("typescript").ResolvedModuleWithFailedLookupLocations | undefined;
    resolveModuleName(moduleName: string, containingFile: string, compilerOptions: import("typescript").CompilerOptions, host: import("typescript").ModuleResolutionHost, cache?: import("typescript").ModuleResolutionCache, redirectedReference?: import("typescript").ResolvedProjectReference, resolutionMode?: import("typescript").ResolutionMode): import("typescript").ResolvedModuleWithFailedLookupLocations;
    bundlerModuleNameResolver(moduleName: string, containingFile: string, compilerOptions: import("typescript").CompilerOptions, host: import("typescript").ModuleResolutionHost, cache?: import("typescript").ModuleResolutionCache, redirectedReference?: import("typescript").ResolvedProjectReference): import("typescript").ResolvedModuleWithFailedLookupLocations;
    nodeModuleNameResolver(moduleName: string, containingFile: string, compilerOptions: import("typescript").CompilerOptions, host: import("typescript").ModuleResolutionHost, cache?: import("typescript").ModuleResolutionCache, redirectedReference?: import("typescript").ResolvedProjectReference): import("typescript").ResolvedModuleWithFailedLookupLocations;
    classicNameResolver(moduleName: string, containingFile: string, compilerOptions: import("typescript").CompilerOptions, host: import("typescript").ModuleResolutionHost, cache?: import("typescript").NonRelativeModuleNameResolutionCache, redirectedReference?: import("typescript").ResolvedProjectReference): import("typescript").ResolvedModuleWithFailedLookupLocations;
    visitNode<TIn extends import("typescript").Node | undefined, TVisited extends import("typescript").Node | undefined, TOut extends import("typescript").Node>(node: TIn, visitor: import("typescript").Visitor<NonNullable<TIn>, TVisited>, test: (node: import("typescript").Node) => node is TOut, lift?: (node: readonly import("typescript").Node[]) => import("typescript").Node): TOut | (TIn & undefined) | (TVisited & undefined);
    visitNode<TIn extends import("typescript").Node | undefined, TVisited extends import("typescript").Node | undefined>(node: TIn, visitor: import("typescript").Visitor<NonNullable<TIn>, TVisited>, test?: (node: import("typescript").Node) => boolean, lift?: (node: readonly import("typescript").Node[]) => import("typescript").Node): import("typescript").Node | (TIn & undefined) | (TVisited & undefined);
    visitNodes<TIn extends import("typescript").Node, TInArray extends import("typescript").NodeArray<TIn> | undefined, TOut extends import("typescript").Node>(nodes: TInArray, visitor: import("typescript").Visitor<TIn, import("typescript").Node | undefined>, test: (node: import("typescript").Node) => node is TOut, start?: number, count?: number): import("typescript").NodeArray<TOut> | (TInArray & undefined);
    visitNodes<TIn extends import("typescript").Node, TInArray extends import("typescript").NodeArray<TIn> | undefined>(nodes: TInArray, visitor: import("typescript").Visitor<TIn, import("typescript").Node | undefined>, test?: (node: import("typescript").Node) => boolean, start?: number, count?: number): import("typescript").NodeArray<import("typescript").Node> | (TInArray & undefined);
    visitLexicalEnvironment(statements: import("typescript").NodeArray<import("typescript").Statement>, visitor: import("typescript").Visitor, context: import("typescript").TransformationContext, start?: number, ensureUseStrict?: boolean, nodesVisitor?: import("typescript").NodesVisitor): import("typescript").NodeArray<import("typescript").Statement>;
    visitParameterList(nodes: import("typescript").NodeArray<import("typescript").ParameterDeclaration>, visitor: import("typescript").Visitor, context: import("typescript").TransformationContext, nodesVisitor?: import("typescript").NodesVisitor): import("typescript").NodeArray<import("typescript").ParameterDeclaration>;
    visitParameterList(nodes: import("typescript").NodeArray<import("typescript").ParameterDeclaration> | undefined, visitor: import("typescript").Visitor, context: import("typescript").TransformationContext, nodesVisitor?: import("typescript").NodesVisitor): import("typescript").NodeArray<import("typescript").ParameterDeclaration> | undefined;
    visitFunctionBody(node: import("typescript").FunctionBody, visitor: import("typescript").Visitor, context: import("typescript").TransformationContext): import("typescript").FunctionBody;
    visitFunctionBody(node: import("typescript").FunctionBody | undefined, visitor: import("typescript").Visitor, context: import("typescript").TransformationContext): import("typescript").FunctionBody | undefined;
    visitFunctionBody(node: import("typescript").ConciseBody, visitor: import("typescript").Visitor, context: import("typescript").TransformationContext): import("typescript").ConciseBody;
    visitIterationBody(body: import("typescript").Statement, visitor: import("typescript").Visitor, context: import("typescript").TransformationContext): import("typescript").Statement;
    visitCommaListElements(elements: import("typescript").NodeArray<import("typescript").Expression>, visitor: import("typescript").Visitor, discardVisitor?: import("typescript").Visitor): import("typescript").NodeArray<import("typescript").Expression>;
    visitEachChild<T extends import("typescript").Node>(node: T, visitor: import("typescript").Visitor, context: import("typescript").TransformationContext | undefined): T;
    visitEachChild<T extends import("typescript").Node>(node: T | undefined, visitor: import("typescript").Visitor, context: import("typescript").TransformationContext | undefined, nodesVisitor?: typeof import("typescript").visitNodes, tokenVisitor?: import("typescript").Visitor): T | undefined;
    getTsBuildInfoEmitOutputFilePath(options: import("typescript").CompilerOptions): string | undefined;
    getOutputFileNames(commandLine: import("typescript").ParsedCommandLine, inputFileName: string, ignoreCase: boolean): readonly string[];
    createPrinter(printerOptions?: import("typescript").PrinterOptions, handlers?: import("typescript").PrintHandlers): import("typescript").Printer;
    findConfigFile(searchPath: string, fileExists: (fileName: string) => boolean, configName?: string): string | undefined;
    resolveTripleslashReference(moduleName: string, containingFile: string): string;
    createCompilerHost(options: import("typescript").CompilerOptions, setParentNodes?: boolean): import("typescript").CompilerHost;
    getPreEmitDiagnostics(program: import("typescript").Program, sourceFile?: import("typescript").SourceFile, cancellationToken?: import("typescript").CancellationToken): readonly import("typescript").Diagnostic[];
    formatDiagnostics(diagnostics: readonly import("typescript").Diagnostic[], host: import("typescript").FormatDiagnosticsHost): string;
    formatDiagnostic(diagnostic: import("typescript").Diagnostic, host: import("typescript").FormatDiagnosticsHost): string;
    formatDiagnosticsWithColorAndContext(diagnostics: readonly import("typescript").Diagnostic[], host: import("typescript").FormatDiagnosticsHost): string;
    flattenDiagnosticMessageText(diag: string | import("typescript").DiagnosticMessageChain | undefined, newLine: string, indent?: number): string;
    getModeForFileReference(ref: import("typescript").FileReference | string, containingFileMode: import("typescript").ResolutionMode): import("typescript").ResolutionMode;
    getModeForResolutionAtIndex(file: import("typescript").SourceFile, index: number, compilerOptions: import("typescript").CompilerOptions): import("typescript").ResolutionMode;
    getModeForUsageLocation(file: import("typescript").SourceFile, usage: import("typescript").StringLiteralLike, compilerOptions: import("typescript").CompilerOptions): import("typescript").ResolutionMode;
    getConfigFileParsingDiagnostics(configFileParseResult: import("typescript").ParsedCommandLine): readonly import("typescript").Diagnostic[];
    getImpliedNodeFormatForFile(fileName: string, packageJsonInfoCache: import("typescript").PackageJsonInfoCache | undefined, host: import("typescript").ModuleResolutionHost, options: import("typescript").CompilerOptions): import("typescript").ResolutionMode;
    createProgram(createProgramOptions: import("typescript").CreateProgramOptions): import("typescript").Program;
    createProgram(rootNames: readonly string[], options: import("typescript").CompilerOptions, host?: import("typescript").CompilerHost, oldProgram?: import("typescript").Program, configFileParsingDiagnostics?: readonly import("typescript").Diagnostic[]): import("typescript").Program;
    resolveProjectReferencePath(ref: import("typescript").ProjectReference): import("typescript").ResolvedConfigFileName;
    createSemanticDiagnosticsBuilderProgram(newProgram: import("typescript").Program, host: import("typescript").BuilderProgramHost, oldProgram?: import("typescript").SemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly import("typescript").Diagnostic[]): import("typescript").SemanticDiagnosticsBuilderProgram;
    createSemanticDiagnosticsBuilderProgram(rootNames: readonly string[] | undefined, options: import("typescript").CompilerOptions | undefined, host?: import("typescript").CompilerHost, oldProgram?: import("typescript").SemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly import("typescript").Diagnostic[], projectReferences?: readonly import("typescript").ProjectReference[]): import("typescript").SemanticDiagnosticsBuilderProgram;
    createEmitAndSemanticDiagnosticsBuilderProgram(newProgram: import("typescript").Program, host: import("typescript").BuilderProgramHost, oldProgram?: import("typescript").EmitAndSemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly import("typescript").Diagnostic[]): import("typescript").EmitAndSemanticDiagnosticsBuilderProgram;
    createEmitAndSemanticDiagnosticsBuilderProgram(rootNames: readonly string[] | undefined, options: import("typescript").CompilerOptions | undefined, host?: import("typescript").CompilerHost, oldProgram?: import("typescript").EmitAndSemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly import("typescript").Diagnostic[], projectReferences?: readonly import("typescript").ProjectReference[]): import("typescript").EmitAndSemanticDiagnosticsBuilderProgram;
    createAbstractBuilder(newProgram: import("typescript").Program, host: import("typescript").BuilderProgramHost, oldProgram?: import("typescript").BuilderProgram, configFileParsingDiagnostics?: readonly import("typescript").Diagnostic[]): import("typescript").BuilderProgram;
    createAbstractBuilder(rootNames: readonly string[] | undefined, options: import("typescript").CompilerOptions | undefined, host?: import("typescript").CompilerHost, oldProgram?: import("typescript").BuilderProgram, configFileParsingDiagnostics?: readonly import("typescript").Diagnostic[], projectReferences?: readonly import("typescript").ProjectReference[]): import("typescript").BuilderProgram;
    readBuilderProgram(compilerOptions: import("typescript").CompilerOptions, host: import("typescript").ReadBuildProgramHost): import("typescript").EmitAndSemanticDiagnosticsBuilderProgram | undefined;
    createIncrementalCompilerHost(options: import("typescript").CompilerOptions, system?: import("typescript").System): import("typescript").CompilerHost;
    createIncrementalProgram<T extends import("typescript").BuilderProgram = import("typescript").EmitAndSemanticDiagnosticsBuilderProgram>({ rootNames, options, configFileParsingDiagnostics, projectReferences, host, createProgram }: import("typescript").IncrementalProgramOptions<T>): T;
    createWatchCompilerHost<T extends import("typescript").BuilderProgram>(configFileName: string, optionsToExtend: import("typescript").CompilerOptions | undefined, system: import("typescript").System, createProgram?: import("typescript").CreateProgram<T>, reportDiagnostic?: import("typescript").DiagnosticReporter, reportWatchStatus?: import("typescript").WatchStatusReporter, watchOptionsToExtend?: import("typescript").WatchOptions, extraFileExtensions?: readonly import("typescript").FileExtensionInfo[]): import("typescript").WatchCompilerHostOfConfigFile<T>;
    createWatchCompilerHost<T extends import("typescript").BuilderProgram>(rootFiles: string[], options: import("typescript").CompilerOptions, system: import("typescript").System, createProgram?: import("typescript").CreateProgram<T>, reportDiagnostic?: import("typescript").DiagnosticReporter, reportWatchStatus?: import("typescript").WatchStatusReporter, projectReferences?: readonly import("typescript").ProjectReference[], watchOptions?: import("typescript").WatchOptions): import("typescript").WatchCompilerHostOfFilesAndCompilerOptions<T>;
    createWatchProgram<T extends import("typescript").BuilderProgram>(host: import("typescript").WatchCompilerHostOfFilesAndCompilerOptions<T>): import("typescript").WatchOfFilesAndCompilerOptions<T>;
    createWatchProgram<T extends import("typescript").BuilderProgram>(host: import("typescript").WatchCompilerHostOfConfigFile<T>): import("typescript").WatchOfConfigFile<T>;
    createBuilderStatusReporter(system: import("typescript").System, pretty?: boolean): import("typescript").DiagnosticReporter;
    createSolutionBuilderHost<T extends import("typescript").BuilderProgram = import("typescript").EmitAndSemanticDiagnosticsBuilderProgram>(system?: import("typescript").System, createProgram?: import("typescript").CreateProgram<T>, reportDiagnostic?: import("typescript").DiagnosticReporter, reportSolutionBuilderStatus?: import("typescript").DiagnosticReporter, reportErrorSummary?: import("typescript").ReportEmitErrorSummary): import("typescript").SolutionBuilderHost<T>;
    createSolutionBuilderWithWatchHost<T extends import("typescript").BuilderProgram = import("typescript").EmitAndSemanticDiagnosticsBuilderProgram>(system?: import("typescript").System, createProgram?: import("typescript").CreateProgram<T>, reportDiagnostic?: import("typescript").DiagnosticReporter, reportSolutionBuilderStatus?: import("typescript").DiagnosticReporter, reportWatchStatus?: import("typescript").WatchStatusReporter): import("typescript").SolutionBuilderWithWatchHost<T>;
    createSolutionBuilder<T extends import("typescript").BuilderProgram>(host: import("typescript").SolutionBuilderHost<T>, rootNames: readonly string[], defaultOptions: import("typescript").BuildOptions): import("typescript").SolutionBuilder<T>;
    createSolutionBuilderWithWatch<T extends import("typescript").BuilderProgram>(host: import("typescript").SolutionBuilderWithWatchHost<T>, rootNames: readonly string[], defaultOptions: import("typescript").BuildOptions, baseWatchOptions?: import("typescript").WatchOptions): import("typescript").SolutionBuilder<T>;
    getDefaultFormatCodeSettings(newLineCharacter?: string): import("typescript").FormatCodeSettings;
    createClassifier(): import("typescript").Classifier;
    createDocumentRegistry(useCaseSensitiveFileNames?: boolean, currentDirectory?: string, jsDocParsingMode?: import("typescript").JSDocParsingMode): import("typescript").DocumentRegistry;
    preProcessFile(sourceText: string, readImportFiles?: boolean, detectJavaScriptImports?: boolean): import("typescript").PreProcessedFileInfo;
    transpileModule(input: string, transpileOptions: import("typescript").TranspileOptions): import("typescript").TranspileOutput;
    transpileDeclaration(input: string, transpileOptions: import("typescript").TranspileOptions): import("typescript").TranspileOutput;
    transpile(input: string, compilerOptions?: import("typescript").CompilerOptions, fileName?: string, diagnostics?: import("typescript").Diagnostic[], moduleName?: string): string;
    toEditorSettings(options: import("typescript").EditorOptions | import("typescript").EditorSettings): import("typescript").EditorSettings;
    displayPartsToString(displayParts: import("typescript").SymbolDisplayPart[] | undefined): string;
    getDefaultCompilerOptions(): import("typescript").CompilerOptions;
    getSupportedCodeFixes(): readonly string[];
    createLanguageServiceSourceFile(fileName: string, scriptSnapshot: import("typescript").IScriptSnapshot, scriptTargetOrOptions: import("typescript").ScriptTarget | import("typescript").CreateSourceFileOptions, version: string, setNodeParents: boolean, scriptKind?: import("typescript").ScriptKind): import("typescript").SourceFile;
    updateLanguageServiceSourceFile(sourceFile: import("typescript").SourceFile, scriptSnapshot: import("typescript").IScriptSnapshot, version: string, textChangeRange: import("typescript").TextChangeRange | undefined, aggressiveChecks?: boolean): import("typescript").SourceFile;
    createLanguageService(host: import("typescript").LanguageServiceHost, documentRegistry?: import("typescript").DocumentRegistry, syntaxOnlyOrLanguageServiceMode?: boolean | import("typescript").LanguageServiceMode): import("typescript").LanguageService;
    getDefaultLibFilePath(options: import("typescript").CompilerOptions): string;
    transform<T extends import("typescript").Node>(source: T | T[], transformers: import("typescript").TransformerFactory<T>[], compilerOptions?: import("typescript").CompilerOptions): import("typescript").TransformationResult<T>;
    server: typeof import("typescript").server;
    versionMajorMinor: "5.6";
    version: string;
    SyntaxKind: typeof import("typescript").SyntaxKind;
    NodeFlags: typeof import("typescript").NodeFlags;
    ModifierFlags: typeof import("typescript").ModifierFlags;
    JsxFlags: typeof import("typescript").JsxFlags;
    GeneratedIdentifierFlags: typeof import("typescript").GeneratedIdentifierFlags;
    TokenFlags: typeof import("typescript").TokenFlags;
    OperationCanceledException: typeof import("typescript").OperationCanceledException;
    ExitStatus: typeof import("typescript").ExitStatus;
    NodeBuilderFlags: typeof import("typescript").NodeBuilderFlags;
    TypeFormatFlags: typeof import("typescript").TypeFormatFlags;
    SymbolFormatFlags: typeof import("typescript").SymbolFormatFlags;
    TypePredicateKind: typeof import("typescript").TypePredicateKind;
    SymbolFlags: typeof import("typescript").SymbolFlags;
    InternalSymbolName: typeof import("typescript").InternalSymbolName;
    TypeFlags: typeof import("typescript").TypeFlags;
    ObjectFlags: typeof import("typescript").ObjectFlags;
    ElementFlags: typeof import("typescript").ElementFlags;
    SignatureKind: typeof import("typescript").SignatureKind;
    IndexKind: typeof import("typescript").IndexKind;
    InferencePriority: typeof import("typescript").InferencePriority;
    DiagnosticCategory: typeof import("typescript").DiagnosticCategory;
    ModuleResolutionKind: typeof import("typescript").ModuleResolutionKind;
    ModuleDetectionKind: typeof import("typescript").ModuleDetectionKind;
    WatchFileKind: typeof import("typescript").WatchFileKind;
    WatchDirectoryKind: typeof import("typescript").WatchDirectoryKind;
    PollingWatchKind: typeof import("typescript").PollingWatchKind;
    ModuleKind: typeof import("typescript").ModuleKind;
    JsxEmit: typeof import("typescript").JsxEmit;
    ImportsNotUsedAsValues: typeof import("typescript").ImportsNotUsedAsValues;
    NewLineKind: typeof import("typescript").NewLineKind;
    ScriptKind: typeof import("typescript").ScriptKind;
    ScriptTarget: typeof import("typescript").ScriptTarget;
    LanguageVariant: typeof import("typescript").LanguageVariant;
    WatchDirectoryFlags: typeof import("typescript").WatchDirectoryFlags;
    Extension: typeof import("typescript").Extension;
    EmitFlags: typeof import("typescript").EmitFlags;
    EmitHint: typeof import("typescript").EmitHint;
    OuterExpressionKinds: typeof import("typescript").OuterExpressionKinds;
    ListFormat: typeof import("typescript").ListFormat;
    JSDocParsingMode: typeof import("typescript").JSDocParsingMode;
    FileWatcherEventKind: typeof import("typescript").FileWatcherEventKind;
    sys: import("typescript").System;
    unchangedTextChangeRange: import("typescript").TextChangeRange;
    factory: import("typescript").NodeFactory;
    ProgramUpdateLevel: typeof import("typescript").ProgramUpdateLevel;
    InvalidatedProjectKind: typeof import("typescript").InvalidatedProjectKind;
    ScriptSnapshot: typeof import("typescript").ScriptSnapshot;
    LanguageServiceMode: typeof import("typescript").LanguageServiceMode;
    SemanticClassificationFormat: typeof import("typescript").SemanticClassificationFormat;
    OrganizeImportsMode: typeof import("typescript").OrganizeImportsMode;
    CompletionTriggerKind: typeof import("typescript").CompletionTriggerKind;
    InlayHintKind: typeof import("typescript").InlayHintKind;
    HighlightSpanKind: typeof import("typescript").HighlightSpanKind;
    IndentStyle: typeof import("typescript").IndentStyle;
    SemicolonPreference: typeof import("typescript").SemicolonPreference;
    SymbolDisplayPartKind: typeof import("typescript").SymbolDisplayPartKind;
    CompletionInfoFlags: typeof import("typescript").CompletionInfoFlags;
    OutliningSpanKind: typeof import("typescript").OutliningSpanKind;
    OutputFileType: typeof import("typescript").OutputFileType;
    EndOfLineState: typeof import("typescript").EndOfLineState;
    TokenClass: typeof import("typescript").TokenClass;
    ScriptElementKind: typeof import("typescript").ScriptElementKind;
    ScriptElementKindModifier: typeof import("typescript").ScriptElementKindModifier;
    ClassificationTypeNames: typeof import("typescript").ClassificationTypeNames;
    ClassificationType: typeof import("typescript").ClassificationType;
    servicesVersion: "0.8";
}>;
export declare function importLibFiles(packageName: CompilerPackageNames): Promise<typeof import("../resources/libFiles/typescript/index")>;
export type FactoryCodeGenerator = (ts: CompilerApi, node: Node) => string;
export declare function getGenerateFactoryCodeFunction(packageName: CompilerPackageNames): Promise<FactoryCodeGenerator>;
export interface PublicApiInfo {
    nodePropertiesBySyntaxKind: Map<string, Set<string>>;
    symbolProperties: Set<string>;
    typeProperties: Set<string>;
    signatureProperties: Set<string>;
}
export declare function getPublicApiInfo(packageName: CompilerPackageNames): Promise<PublicApiInfo>;
